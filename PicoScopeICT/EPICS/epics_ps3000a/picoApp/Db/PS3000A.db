###################################################################
#  These records control run/stop                                 # 
###################################################################
record(bo, "$(P)$(R)Run")
{
    field(PINI,  "1")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SCOPE_RUN")
    field(ZNAM, "Stop")
    field(ONAM, "Run")
}

record(bi, "$(P)$(R)Run_RBV")
{
    field(PINI, "1")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SCOPE_RUN")
    field(ZNAM, "Done")
    field(ZSV,  "NO_ALARM")
    field(ONAM, "Running")
    field(OSV,  "MINOR")
    field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the number of points                            # 
###################################################################

record(longin, "$(P)$(R)MaxPoints_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SCOPE_MAX_POINTS")
   field(SCAN, "I/O Intr")
}

# Connected / status records
record(bi, "$(P)$(R)PicoConnected_RBV")
{
    field(PINI,  "1")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PICO_CONNECTED")
    field(SCAN, "I/O Intr")
}

record(bi, "$(P)$(R)PicoConnect_RBV")
{
    field(PINI,  "1")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PICO_CONNECT")
    field(SCAN, "I/O Intr")
}

record(bo, "$(P)$(R)PicoConnect")
{
    field(PINI,  "1")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PICO_CONNECT")
}

record(longin, "$(P)$(R)PicoStatus")
{
    field(PINI,  "1")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))PICO_STATUS")
    field(SCAN, "I/O Intr")
    field(HSV,  "MAJOR")
    field(HIGH, "1")
}

###################################################################
#  These records are the time per division                        #
###################################################################
record(mbbo, "$(P)$(R)TimePerDivSelect")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SCOPE_TIME_PER_DIV_SELECT")
   field(ZRST, "100 ns")
   field(ZRVL, "100")
   field(ONST, "200 ns")
   field(ONVL, "200")
   field(TWST, "500 ns")
   field(TWVL, "500")
   field(THST, "1 us")
   field(THVL, "1000")
   field(FRST, "2 us")
   field(FRVL, "2000")
   field(FVST, "5 us")
   field(FVVL, "5000")
   field(SXST, "10 us")
   field(SXVL, "10000")
   field(SVST, "20 us")
   field(SVVL, "20000")
   field(EIST, "50 us")
   field(EIVL, "50000")
   field(NIST, "100 us")
   field(NIVL, "100000")
   field(TEST, "200 us")
   field(TEVL, "200000")
   field(ELST, "500 us")
   field(ELVL, "500000")
   field(TVST, "1 ms")
   field(TVVL, "1000000")
}

record(ai, "$(P)$(R)FullTime_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SCOPE_FULL_TIME")
   field(EGU,  "ns")
   field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)TimePerDiv_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SCOPE_TIME_PER_DIV")
   field(EGU,  "ns")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the channel range.                           #
#  The driver sets these dynamically based on the VoltsPerDivision#
###################################################################

# Signal generator

record(ao, "$(P)$(R)SigGenPkToPk")
{
   field(PINI, "1")
   field(DTYP, "asynFloat64")
   field(EGU,  "V")
   field(PREC, "6")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))sig_pktopk")
}
record(ai, "$(P)$(R)SigGenPkToPk_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))sig_pktopk")
   field(EGU,  "V")
   field(PREC, "6")
   field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)SigGenOffset")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(PREC, "6")
   field(EGU, "V")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))sig_offset")
}
record(ai, "$(P)$(R)SigGenOffset_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))sig_offset")
   field(PREC, "6")
   field(EGU, "V")
   field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)DownsampledFrequency")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))downsampled_frequency")
}
record(ai, "$(P)$(R)DownsampledFrequency_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))downsampled_frequency")
   field(EGU,  "Hz")
   field(SCAN, "I/O Intr")
}
record(ao, "$(P)$(R)SampleFrequency")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))sample_frequency")
}
record(ai, "$(P)$(R)SampleFrequency_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))sample_frequency")
   field(EGU,  "Hz")
   field(SCAN, "I/O Intr")
}
record(ao, "$(P)$(R)SampleLength")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))sample_length")
}
record(ai, "$(P)$(R)SampleLength_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))sample_length")
   field(SCAN, "I/O Intr")
}

record(ao, "$(P)$(R)DownSampleRatio")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))down_sample_ratio")
}
record(ai, "$(P)$(R)DownSampleRatio_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))down_sample_ratio")
   field(SCAN, "I/O Intr")
}
record(ao, "$(P)$(R)SigGenFrequency")
{
   field(PINI, "1")
   field(DTYP, "asynFloat64")
   field(EGU,  "Hz")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))sig_frequency")
}
record(ai, "$(P)$(R)SigGenFrequency_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))sig_frequency")
   field(EGU,  "Hz")
   field(SCAN, "I/O Intr")
}

record(mbbo, "$(P)$(R)SigGenWaveType")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(ZRST, "Sine")
   field(ZRVL, "0")
   field(ONST, "Square")
   field(ONVL, "1")
   field(TWST, "Triangle")
   field(TWVL, "2")
   field(THST, "Ramp up")
   field(THVL, "3")
   field(FRST, "Ramp down")
   field(FRVL, "4")
   field(FVST, "Sinc")
   field(FVVL, "5")
   field(SXST, "Gaussian")
   field(SXVL, "6")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))sig_wavetype")
}
record(mbbi, "$(P)$(R)SigGenWaveType_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynInt32")
   field(ZRST, "Sine")
   field(ZRVL, "0")
   field(ONST, "Square")
   field(ONVL, "1")
   field(TWST, "Triangle")
   field(TWVL, "2")
   field(THST, "Ramp up")
   field(THVL, "3")
   field(FRST, "Ramp down")
   field(FRVL, "4")
   field(FVST, "Sinc")
   field(FVVL, "5")
   field(SXST, "Gaussian")
   field(SXVL, "6")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))sig_wavetype")
   field(SCAN, "I/O Intr")
}
###################################################################
#  These records are the trigger delay                            #
###################################################################
record(ao, "$(P)$(R)TriggerDelay")
{
   field(PINI, "1")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SCOPE_TRIGGER_DELAY")
   field(PREC, "5")
}

record(ai, "$(P)$(R)TriggerDelay_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SCOPE_TRIGGER_DELAY")
   field(PREC, "5")
   field(SCAN, "I/O Intr")
}
record(mbbo, "$(P)$(R)TriggerSource")
{
	field(PINI, "1")
	field(DTYP, "asynInt32")
	field(OUT, "@asyn($(PORT),$(ADDR),$(TIMEOUT))trigger_source")
	field(ZRST, "Channel A")
	field(ZRVL, "0")
	field(ONST, "Channel B")
	field(ONVL, "1")
	field(TWST, "Channel C")
	field(TWVL, "2")
	field(THST, "Channel D")
	field(THVL, "3")
}

record(mbbi, "$(P)$(R)TriggerSource_RBV")
{
	field(PINI, "1")
	field(DTYP, "asynInt32")
	field(INP, "@asyn($(PORT),$(ADDR),$(TIMEOUT))trigger_source")
	field(ZRST, "Channel A")
	field(ZRVL, "0")
	field(ONST, "Channel B")
	field(ONVL, "1")
	field(TWST, "Channel C")
	field(TWVL, "2")
	field(THST, "Channel D")
	field(THVL, "3")
	field(SCAN, "I/O Intr")
}


###################################################################
#  These records are the noise amplitude                           #
###################################################################
record(ao, "$(P)$(R)NoiseAmplitude")
{
   field(PINI, "1")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SCOPE_NOISE_AMPLITUDE")
   field(PREC, "3")
}

record(ai, "$(P)$(R)NoiseAmplitude_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SCOPE_NOISE_AMPLITUDE")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  These records are the update time                              #
###################################################################
record(ao, "$(P)$(R)UpdateTime")
{
   field(PINI, "1")
   field(DTYP, "asynFloat64")
   field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SCOPE_UPDATE_TIME")
   field(PREC, "3")
}

record(ai, "$(P)$(R)UpdateTime_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SCOPE_UPDATE_TIME")
   field(PREC, "3")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the time base                                   #
###################################################################
record(waveform, "$(P)$(R)TimeBase_RBV")
{
    field(PINI, "1")
    field(DTYP, "asynFloat64ArrayIn")
    field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SCOPE_TIME_BASE")
    field(FTVL, "DOUBLE")
    field(NELM, "$(NPOINTS)")
}

record(longout, "$(P)$(R)TimeBaseHopr") {
	field(DTYP, "asynInt32")
    	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))time_base_hopr")
	field(DOL, "$(P)$(R)TimeBase.HOPR CP MS")
	field(OMSL, "closed_loop")
	field(TPRO, "1")
}
record(longout, "$(P)$(R)TimeBaseLopr") {
	field(DTYP, "asynInt32")
    	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))time_base_lopr")
	field(DOL, "$(P)$(R)TimeBase.LOPR CP MS")
	field(OMSL, "closed_loop")
	field(TPRO, "1")
}
record(longout, "$(P)$(R)TimeBaseNelm") {
	field(DTYP, "asynInt32")
    	field(OUT,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))time_base_nelm")
	field(DOL, "$(P)$(R)TimeBase.NELM CP MS")
	field(OMSL, "closed_loop")
	field(TPRO, "1")
}

###################################################################
#  This record is the minimum value                               #
###################################################################
record(ai, "$(P)$(R)MinValue_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SCOPE_MIN_VALUE")
   field(PREC, "4")
   field(EGU, "V")
   field(SCAN, "I/O Intr")
}

record(ai, "$(P)$(R)ScopeClear")
{
}

###################################################################
#  This record is the maximum value                               #
###################################################################
record(ai, "$(P)$(R)MaxValue_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SCOPE_MAX_VALUE")
   field(PREC, "4")
   field(EGU, "V")
   field(SCAN, "I/O Intr")
}

###################################################################
#  This record is the mean value                               #
###################################################################
record(ai, "$(P)$(R)MeanValue_RBV")
{
   field(PINI, "1")
   field(DTYP, "asynFloat64")
   field(INP,  "@asyn($(PORT),$(ADDR),$(TIMEOUT))SCOPE_MEAN_VALUE")
   field(PREC, "4")
   field(SCAN, "I/O Intr")
}
